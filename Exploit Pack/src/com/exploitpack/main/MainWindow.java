/**
Exploit Pack - Security Framework for Exploit Developers
Copyright 2013 Juan Sacco http://exploitpack.com

This program is free software: you can redistribute it and/or modify it under the terms of the
GNU General Public License as published by the Free Software Foundation, either version 3 
or any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program. 
If not, see http://www.gnu.org/licenses/
 **/

package com.exploitpack.main;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.Socket;
import java.net.URL;
import java.net.UnknownHostException;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;

import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.browser.Browser;
import org.eclipse.swt.custom.CBanner;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.program.Program;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Link;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.ProgressBar;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.swt.widgets.ToolItem;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.ui.forms.widgets.FormToolkit;
import org.eclipse.wb.swt.SWTResourceManager;

import com.exploitpack.agent.Connect;
import com.exploitpack.project.ProjectWindow;

public class MainWindow {

	private static boolean debugMode;
	protected static Shell shlExploitPack;

	private Object ExploitModule;

	private String ipAddrStr;

	private String HostName;

	private Text txtModulesExplorer;

	private final FormToolkit formToolkit = new FormToolkit(

	Display.getDefault());

	private String AgentPort;

	public int TotalModulesLength;

	private String ExploitCodeName;

	private String ExploitType;

	@SuppressWarnings("unused")
	private String Service;

	@SuppressWarnings("unused")
	private String ExploitPlatform;

	private Text ResponseData;

	private Text ShellcodeConsole;

	private Text ShellcodeInput;

	private Text QuickInformation;

	private Text ApplicationLog;

	private Text TargetName;

	private Text TargetArgs;

	private Text TargetLhost;
	private static List<Integer> ports = new ArrayList<Integer>();
	@SuppressWarnings("unused")
	private static String host;

	private Text TargetLPort;

	private Text DebugLog;
	private String LogTime;
	private String shellaftercheck = "Close";

	private String OSType;
	private Text WebURL;
	private Text PostData;
	private TreeItem LastTreeItemSelected = null;
	public String CurrentAppVersion;
	private Button btnLaunch;
	private Tree TreeExploits;
	private TabFolder tabFolder;
	private Combo SearchCombo;
	private ToolBar toolBar;
	private CBanner banner;

	private static List<Integer> OpenPortsList = new ArrayList<Integer>();
	@SuppressWarnings("unused")
	private static String ScannerHost;
	private Text URLBrowser;
	private Text TargetPath;
	public int port2;
	public int port;
	XMLTreenode NewXMLNode = new XMLTreenode();
	String ExploitSelection = "";

	private String pythonFullPath;
	private Text urlToCheck;
	private String licenseType;

	public static void main(String[] args) {
		try {
			MainWindow window = new MainWindow();
			window.open();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void open() {
		debugMode = false;

		Display display = Display.getDefault();

		createContents();

		Rectangle bounds = display.getBounds();
		Rectangle rect = shlExploitPack.getBounds();

		int x = bounds.x + (bounds.width - rect.width) / 2;
		int y = bounds.y + (bounds.height - rect.height) / 2;

		shlExploitPack.setLocation(x, y);
		
				Composite compositeFooter = new Composite(shlExploitPack, SWT.BORDER);
				compositeFooter.setBackground(SWTResourceManager
						.getColor(247, 246, 246));
				FormData fd_compositeFooter = new FormData();
				fd_compositeFooter.left = new FormAttachment(0, 10);
				fd_compositeFooter.right = new FormAttachment(100, -10);
				fd_compositeFooter.top = new FormAttachment(100, -33);
				fd_compositeFooter.bottom = new FormAttachment(100, -10);
				compositeFooter.setLayoutData(fd_compositeFooter);
				compositeFooter.setLayout(new FormLayout());
				formToolkit.adapt(compositeFooter);
				formToolkit.paintBordersFor(compositeFooter);
				/*fd_tabFolder.bottom = new FormAttachment(compositeFooter, -199);
				fd_btnLaunch.bottom = new FormAttachment(compositeFooter, -6);*/
				
						Label lblModuleStatus = new Label(compositeFooter, SWT.NONE);
						lblModuleStatus.setFont(SWTResourceManager.getFont("Tahoma", 8,
								SWT.BOLD));
						FormData fd_lblModuleStatus = new FormData();
						lblModuleStatus.setLayoutData(fd_lblModuleStatus);
						formToolkit.adapt(lblModuleStatus, true, true);
						lblModuleStatus.setText("Module Status: ");
						
								final ProgressBar progressBar = new ProgressBar(compositeFooter,
										SWT.NONE);
								fd_lblModuleStatus.bottom = new FormAttachment(progressBar, 0, SWT.BOTTOM);
								fd_lblModuleStatus.right = new FormAttachment(progressBar, -6);
								FormData fd_progressBar = new FormData();
								fd_progressBar.bottom = new FormAttachment(100, -4);
								fd_progressBar.top = new FormAttachment(0, 4);
								fd_progressBar.right = new FormAttachment(100, -10);
								progressBar.setLayoutData(fd_progressBar);
								formToolkit.adapt(progressBar, true, true);
								
										Label lblWelcomeToExploit = new Label(compositeFooter, SWT.NONE);
										lblWelcomeToExploit
												.setText("Welcome to Exploit Pack - One steap ahead - 2.2.0a ALPHA RELEASE - BUGS ARE EVERYWHERE");
										lblWelcomeToExploit.setFont(SWTResourceManager.getFont("Tahoma", 8,
												SWT.BOLD));
										lblWelcomeToExploit.setAlignment(SWT.CENTER);
										FormData fd_lblWelcomeToExploit = new FormData();
										fd_lblWelcomeToExploit.bottom = new FormAttachment(lblModuleStatus, 0, SWT.BOTTOM);
										fd_lblWelcomeToExploit.left = new FormAttachment(0, 10);
										lblWelcomeToExploit.setLayoutData(fd_lblWelcomeToExploit);
										formToolkit.adapt(lblWelcomeToExploit, true, true);

		shlExploitPack.open();

		shlExploitPack.layout();

		while (!shlExploitPack.isDisposed()) {

			if (!display.readAndDispatch()) {

				display.sleep();

			}

		}

	}

	@SuppressWarnings("unused")
	public void createContents() {
		// Set App Version
		CurrentAppVersion = "2.1";

		// Obtain local time
		Format formatter;
		Date date = new Date();
		formatter = new SimpleDateFormat("hh:mm:ss");
		LogTime = formatter.format(date);

		// Try to install python
		// Obtain Python Path
		try {
			// Read file
			FileReader fstream = new FileReader(
					"data/config/exploitpack.config");
			BufferedReader in = new BufferedReader(fstream);
			pythonFullPath = in.readLine() + "\n";
			// Close the output stream
			in.close();
		} catch (Exception e1) {
			// Catch exception if any
			RequirementInstaller.main(null);
			System.err.println("Error: " + e1.getMessage());
		}

		// Try to obtain local IP and Hostname
		try {

			InetAddress addr = InetAddress.getLocalHost();

			// Get IP Address

			byte[] ipAddr = addr.getAddress();

			// Convert to dot representation

			ipAddrStr = "";

			for (int i = 0; i < ipAddr.length; i++) {

				if (i > 0) {

					ipAddrStr += ".";

				}

				ipAddrStr += ipAddr[i] & 0xFF;

				// Get hostname

				HostName = addr.getHostName();

			}

		} catch (UnknownHostException e) {

		}

		// Start to load the Window

		shlExploitPack = new Shell();
		shlExploitPack.setText("Exploit Pack - One step ahead ( Alpha release )");
		// Check license
		try {
			// Read file
			FileReader fstream = new FileReader("data/config/exploitpack1");
			BufferedReader in = new BufferedReader(fstream);
			licenseType = in.readLine() + "\n";
			System.out.println(licenseType);
			// Close the output stream
			in.close();
		} catch (Exception e1) {
			// Catch exception if any
			System.err.println("Error: " + e1.getMessage());
		}

		// Start Systray
		SysTray.main(null);

		toolBar = new ToolBar(shlExploitPack, SWT.FLAT | SWT.WRAP | SWT.RIGHT);
		FormData fd_toolBar = new FormData();
		fd_toolBar.right = new FormAttachment(100);
		fd_toolBar.left = new FormAttachment(0);
		fd_toolBar.top = new FormAttachment(0, 3);
		toolBar.setLayoutData(fd_toolBar);
		toolBar.setBackground(SWTResourceManager.getColor(SWT.COLOR_GRAY));

		formToolkit.adapt(toolBar);

		formToolkit.paintBordersFor(toolBar);

		ToolItem toolItem_5 = new ToolItem(toolBar, SWT.SEPARATOR);

		ToolItem tltmNewProject = new ToolItem(toolBar, SWT.NONE);
		tltmNewProject.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ProjectWindow.main(null);
			}
		});
		tltmNewProject.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316133906_package.png"));
		tltmNewProject.setText("New Project");

		ToolItem tltmOpenProject = new ToolItem(toolBar, SWT.NONE);
		tltmOpenProject.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				OpenFile();
			}
		});
		tltmOpenProject.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316133571_package_go.png"));
		tltmOpenProject.setText("Open Project");

		ToolItem toolItem_6 = new ToolItem(toolBar, SWT.SEPARATOR);

		ToolItem tltmNewItem = new ToolItem(toolBar, SWT.NONE);
		tltmNewItem.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316134049_table_save.png"));
		tltmNewItem.setText("Save Project");

		ToolItem toolItem = new ToolItem(toolBar, SWT.SEPARATOR);

		ToolItem tltmNewItem_1 = new ToolItem(toolBar, SWT.NONE);
		tltmNewItem_1.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316134425_cut_red.png"));
		tltmNewItem_1.setText("Cut");

		ToolItem tltmNewItem_2 = new ToolItem(toolBar, SWT.NONE);
		tltmNewItem_2.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316134439_page_copy.png"));
		tltmNewItem_2.setText("Copy");

		ToolItem tltmNewItem_3 = new ToolItem(toolBar, SWT.NONE);
		tltmNewItem_3.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316134460_page_white_paste.png"));
		tltmNewItem_3.setText("Paste");

		ToolItem toolItem_1 = new ToolItem(toolBar, SWT.SEPARATOR);

		ToolItem LocalInterface = new ToolItem(toolBar, SWT.DROP_DOWN);
		LocalInterface.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316134303_application_form_delete.png"));
		LocalInterface.setText("Interface: " + HostName);

		ToolItem toolItem_2 = new ToolItem(toolBar, SWT.SEPARATOR);

		ToolItem tltmNewItem_4 = new ToolItem(toolBar, SWT.NONE);
		tltmNewItem_4.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					FileWriter fstream = new FileWriter("log/exploitpack.log");
					BufferedWriter out = new BufferedWriter(fstream);
					out.append(DebugLog.getText());
					System.out.println(DebugLog.getText());
					// Close the output stream
					out.close();
					Reports.main(null);
				} catch (Exception e2) {
					DebugLog.append(e2.toString());
				}

			}
		});
		tltmNewItem_4.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316134599_chart_bar.png"));
		tltmNewItem_4.setText("View Log");

		ToolItem toolItem_3 = new ToolItem(toolBar, SWT.SEPARATOR);

		ToolItem tltmModuleEditor = new ToolItem(toolBar, SWT.NONE);
		tltmModuleEditor.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				com.exploitpack.editor.MainEditor.main(null);
			}
		});

		tltmModuleEditor.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/editor.png"));
		tltmModuleEditor.setText("Module Editor");

		ToolItem toolItem_4 = new ToolItem(toolBar, SWT.SEPARATOR);

		ToolItem tltmNewItem_5 = new ToolItem(toolBar, SWT.NONE);
		tltmNewItem_5.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				Updater.main(null);
			}
		});
		tltmNewItem_5.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/checkupdate.png"));
		tltmNewItem_5.setText("Update Manager");
		formToolkit.adapt(toolBar);
		formToolkit.paintBordersFor(toolBar);

		ToolItem toolItem_9 = new ToolItem(toolBar, SWT.SEPARATOR);

		shlExploitPack.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316133906_package.png"));

		shlExploitPack.setSize(1464, 911);

		if (licenseType.contains("1")) {
			shlExploitPack.setText("Exploit Pack - One steap ahead ( Alpha release )");
		} else {
			shlExploitPack
					.setText("Exploit Pack - NOT REGISTERED");
		}

		shlExploitPack.setLayout(new FormLayout());

		Menu menu = new Menu(shlExploitPack, SWT.BAR);

		shlExploitPack.setMenuBar(menu);

		MenuItem mntmFile = new MenuItem(menu, SWT.CASCADE);

		mntmFile.setText("File");

		Menu menu_1 = new Menu(mntmFile);

		mntmFile.setMenu(menu_1);

		MenuItem mntmNewProject = new MenuItem(menu_1, SWT.NONE);
		mntmNewProject.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316133906_package.png"));
		mntmNewProject.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ProjectWindow.main(null);
			}
		});

		mntmNewProject.setAccelerator(SWT.MOD1 + 'N');

		mntmNewProject.setText("New Project \tCtrl+N");

		MenuItem mntmLoadProject = new MenuItem(menu_1, SWT.NONE);
		mntmLoadProject.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				OpenFile();
			}
		});

		mntmLoadProject.setText("Open Project.. \tCtrl+O");

		new MenuItem(menu_1, SWT.SEPARATOR);

		MenuItem mntmSaveProject = new MenuItem(menu_1, SWT.NONE);
		mntmSaveProject.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316134049_table_save.png"));

		mntmSaveProject.setText("Save Project \tCtrl+S");

		MenuItem mntmCloseProject = new MenuItem(menu_1, SWT.NONE);

		mntmCloseProject.setText("Close Project \tCtrl+W");

		new MenuItem(menu_1, SWT.SEPARATOR);

		MenuItem mntmExit = new MenuItem(menu_1, SWT.NONE);

		mntmExit.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				shlExploitPack.dispose();
			}

		});

		mntmExit.setText("Exit");

		mntmExit.setAccelerator(SWT.MOD1 + 'Q');

		MenuItem mntmEdit = new MenuItem(menu, SWT.CASCADE);

		mntmEdit.setText("Edit");

		Menu menu_2 = new Menu(mntmEdit);

		mntmEdit.setMenu(menu_2);

		MenuItem mntmNewItem = new MenuItem(menu_2, SWT.NONE);
		mntmNewItem.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/arrow_undo.png"));
		mntmNewItem.setText("Undo");

		MenuItem mntmNewItem_1 = new MenuItem(menu_2, SWT.NONE);
		mntmNewItem_1.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/arrow_redo.png"));
		mntmNewItem_1.setText("Redo");

		new MenuItem(menu_2, SWT.SEPARATOR);

		MenuItem mntmCut = new MenuItem(menu_2, SWT.NONE);
		mntmCut.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316134425_cut_red.png"));
		mntmCut.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ShellcodeConsole.cut();
			}
		});

		mntmCut.setText("Cut \tCtrl+X");

		mntmCut.setAccelerator(SWT.MOD1 + 'X');

		MenuItem mntmCopy = new MenuItem(menu_2, SWT.NONE);
		mntmCopy.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316134439_page_copy.png"));
		mntmCopy.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ShellcodeConsole.copy();
			}
		});

		mntmCopy.setText("Copy \tCtrl+C");

		mntmCopy.setAccelerator(SWT.MOD1 + 'C');

		MenuItem mntmPaste = new MenuItem(menu_2, SWT.NONE);
		mntmPaste.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1316134460_page_white_paste.png"));
		mntmPaste.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ShellcodeConsole.paste();
			}
		});

		mntmPaste.setText("Paste \tCtrl+P");

		mntmPaste.setAccelerator(SWT.MOD1 + 'P');

		MenuItem mntmModules = new MenuItem(menu, SWT.CASCADE);

		mntmModules.setText("Modules");

		Menu menu_3 = new Menu(mntmModules);

		mntmModules.setMenu(menu_3);

		MenuItem mntmShowModules = new MenuItem(menu_3, SWT.NONE);
		mntmShowModules.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/cog.png"));

		mntmShowModules.setText("Show Modules");

		MenuItem mntmTools = new MenuItem(menu, SWT.CASCADE);

		mntmTools.setText("Tools");

		Menu menu_4 = new Menu(mntmTools);

		mntmTools.setMenu(menu_4);

		MenuItem mntmConsole = new MenuItem(menu_4, SWT.NONE);
		mntmConsole.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
			}
		});

		mntmConsole.setText("Console \tCtrl+C");

		MenuItem mntmRefreshModules = new MenuItem(menu_4, SWT.NONE);
		mntmRefreshModules.setImage(SWTResourceManager.getImage(
				MainWindow.class, "/resources/refresh.png"));

		mntmRefreshModules.setText("Refresh Modules \tF5");

		new MenuItem(menu_4, SWT.SEPARATOR);

		MenuItem mntmModuleEditor = new MenuItem(menu_4, SWT.NONE);
		mntmModuleEditor.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/editor.png"));
		mntmModuleEditor.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				com.exploitpack.editor.MainEditor.main(null);
			}
		});
		mntmModuleEditor.setText("Module Editor \tCtrl+M");

		new MenuItem(menu_4, SWT.SEPARATOR);

		MenuItem mntmEditPreferences = new MenuItem(menu_4, SWT.NONE);
		mntmEditPreferences.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				Preferences.main(null);
			}
		});
		mntmEditPreferences.setImage(SWTResourceManager.getImage(
				MainWindow.class, "/resources/preferences.png"));
		mntmEditPreferences.setText("Edit Preferences");

		mntmPaste.setAccelerator(SWT.MOD1 + 'C');

		MenuItem mntmRun = new MenuItem(menu, SWT.CASCADE);
		mntmRun.setText("Run");

		Menu menu_7 = new Menu(mntmRun);
		mntmRun.setMenu(menu_7);

		MenuItem mntmUpdate = new MenuItem(menu, SWT.CASCADE);

		mntmUpdate.setText("Update");

		Menu menu_5 = new Menu(mntmUpdate);

		mntmUpdate.setMenu(menu_5);

		MenuItem mntmCheckUpdates = new MenuItem(menu_5, SWT.NONE);
		mntmCheckUpdates.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/checkupdate.png"));

		mntmCheckUpdates.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {

				Updater.main(null);
			}

		});

		mntmCheckUpdates.setText("Check Updates \tCtrl+U");

		mntmPaste.setAccelerator(SWT.MOD1 + 'U');

		MenuItem mntmHelp = new MenuItem(menu, SWT.CASCADE);

		mntmHelp.setText("Help");

		Menu menu_6 = new Menu(mntmHelp);

		mntmHelp.setMenu(menu_6);

		MenuItem mntmViewHelp = new MenuItem(menu_6, SWT.NONE);
		mntmViewHelp.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				Program.launch("http://exploitpack.com/forum");
			}
		});
		mntmViewHelp.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/help.png"));

		mntmViewHelp.setText("View Help \tCtrl+H");

		mntmPaste.setAccelerator(SWT.MOD1 + 'H');

		MenuItem mntmReportABug = new MenuItem(menu_6, SWT.NONE);
		mntmReportABug.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				Program.launch("http://exploitpack.com/bugs");
			}
		});
		mntmReportABug.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/reportbug.png"));

		mntmReportABug.setText("Report a Bug");

		new MenuItem(menu_6, SWT.SEPARATOR);

		MenuItem mntmCheckForUpdates = new MenuItem(menu_6, SWT.NONE);
		mntmCheckForUpdates.setImage(SWTResourceManager.getImage(
				MainWindow.class, "/resources/updatemanager.png"));
		mntmCheckForUpdates.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				com.exploitpack.main.Updater.main(null);
			}
		});
		mntmCheckForUpdates.setText("Update Manager");

		MenuItem mntmLicense = new MenuItem(menu_6, SWT.NONE);
		mntmLicense.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				License.main(null);
			}
		});
		mntmLicense.setText("License");

		MenuItem menuItem = new MenuItem(menu_6, SWT.SEPARATOR);

		MenuItem mntmNewItem_2 = new MenuItem(menu_6, SWT.NONE);
		mntmNewItem_2.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				Register.main(null);
			}
		});
		mntmNewItem_2.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/1330156330_key.png"));
		mntmNewItem_2.setText("Enter Serial");

		new MenuItem(menu_6, SWT.SEPARATOR);

		MenuItem mntmAbout = new MenuItem(menu_6, SWT.NONE);
		mntmAbout.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/about.png"));
		mntmAbout.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				About OpenForm = new About();
				OpenForm.open();
			}
		});

		mntmAbout.setText("About - Exploit Pack");

		tabFolder = new TabFolder(shlExploitPack, SWT.NONE);
		FormData fd_tabFolder = new FormData();
		fd_tabFolder.right = new FormAttachment(100, -10);
		fd_tabFolder.top = new FormAttachment(toolBar, 1);
		tabFolder.setLayoutData(fd_tabFolder);

		TabItem tbtmModules = new TabItem(tabFolder, SWT.NONE);

		tbtmModules.setText("Modules");

		Composite composite1 = new Composite(tabFolder, SWT.NONE);
		composite1.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		tbtmModules.setControl(composite1);

		composite1.setLayout(new FormLayout());

		Group grpTargetInformation = new Group(composite1, SWT.NONE);
		grpTargetInformation.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		FormData fd_grpTargetInformation = new FormData();
		fd_grpTargetInformation.right = new FormAttachment(0, 415);
		fd_grpTargetInformation.left = new FormAttachment(0, 10);
		fd_grpTargetInformation.bottom = new FormAttachment(0, 198);

		fd_grpTargetInformation.top = new FormAttachment(0, 10);

		grpTargetInformation.setLayoutData(fd_grpTargetInformation);

		grpTargetInformation.setText("Target Properties");

		Group grpShellcodeConsole = new Group(composite1, SWT.NONE);
		grpShellcodeConsole.setLayout(new FormLayout());

		FormData fd_grpShellcodeConsole = new FormData();
		fd_grpShellcodeConsole.bottom = new FormAttachment(100, -10);
		fd_grpShellcodeConsole.top = new FormAttachment(grpTargetInformation, 6);
		fd_grpShellcodeConsole.left = new FormAttachment(0, 10);

		grpShellcodeConsole.setLayoutData(fd_grpShellcodeConsole);

		grpShellcodeConsole.setText("Shellcode Console");

		Group grpExecutedModules = new Group(composite1, SWT.NONE);
		grpExecutedModules.setLayout(new FormLayout());

		FormData fd_grpExecutedModules = new FormData();
		fd_grpExecutedModules.top = new FormAttachment(0, 10);
		fd_grpExecutedModules.bottom = new FormAttachment(grpShellcodeConsole, -6);
		fd_grpExecutedModules.left = new FormAttachment(grpTargetInformation, 6);

		final Text TargetHost = new Text(grpTargetInformation, SWT.BORDER);

		TargetHost.setBounds(71, 63, 134, 33);

		formToolkit.adapt(TargetHost, true, true);

		final Text TargetPort = new Text(grpTargetInformation, SWT.BORDER);

		TargetPort.setBounds(71, 102, 134, 33);

		formToolkit.adapt(TargetPort, true, true);

		Label lblTarget = new Label(grpTargetInformation, SWT.NONE);
		lblTarget.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		lblTarget.setBounds(10, 63, 55, 19);


		lblTarget.setText("Target:");

		Label lblPort = new Label(grpTargetInformation, SWT.NONE);
		lblPort.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		lblPort.setBounds(10, 102, 55, 19);


		lblPort.setText("Port:");

		Label lblProject = formToolkit.createLabel(grpTargetInformation,

		"Project:", SWT.NONE);
		lblProject.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		lblProject.setBounds(10, 24, 55, 19);

		Label lblArgs = formToolkit.createLabel(grpTargetInformation,
				"Arguments:", SWT.NONE);
		lblArgs.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		lblArgs.setBounds(211, 102, 75, 19);

		TargetName = new Text(grpTargetInformation, SWT.BORDER);

		TargetName.setText("Exploit Pack");

		TargetName.setBounds(71, 24, 134, 33);

		formToolkit.adapt(TargetName, true, true);

		TargetArgs = new Text(grpTargetInformation, SWT.BORDER);

		TargetArgs.setBounds(292, 102, 101, 33);

		formToolkit.adapt(TargetArgs, true, true);

		TargetLhost = new Text(grpTargetInformation, SWT.BORDER);

		TargetLhost.setBounds(292, 24, 101, 33);

		TargetLhost.setText(ipAddrStr);

		formToolkit.adapt(TargetLhost, true, true);

		TargetLPort = new Text(grpTargetInformation, SWT.BORDER);

		TargetLPort.setBounds(292, 63, 101, 33);

		formToolkit.adapt(TargetLPort, true, true);

		Label lblShellcode = formToolkit.createLabel(grpTargetInformation,

		"Shellcode:", SWT.NONE);
		lblShellcode.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		lblShellcode.setBounds(211, 141, 75, 19);

		Label lblLocalHost = formToolkit.createLabel(grpTargetInformation,

		"Local Host:", SWT.NONE);
		lblLocalHost.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		lblLocalHost.setBounds(211, 24, 75, 19);

		Label lblLocalPort = formToolkit.createLabel(grpTargetInformation,

		"Local Port:", SWT.NONE);
		lblLocalPort.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		lblLocalPort.setBounds(211, 63, 73, 19);

		final Combo ShellcodeCombo = new Combo(grpTargetInformation, SWT.NONE);
		ShellcodeCombo.setItems(new String[] { "Remote Shell", "Execute Code", "Command", "Local Shell" });
		ShellcodeCombo.setBounds(292, 141, 101, 24);
		ShellcodeCombo.setText("Select");

		Label lblPath = new Label(grpTargetInformation, SWT.NONE);
		lblPath.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		lblPath.setBounds(10, 141, 55, 24);

		lblPath.setText("Path:");

		TargetPath = new Text(grpTargetInformation, SWT.BORDER);
		TargetPath.setBounds(71, 141, 134, 33);
		formToolkit.adapt(TargetPath, true, true);

		grpExecutedModules.setLayoutData(fd_grpExecutedModules);

		grpExecutedModules.setText("Modules Log");

		Group grpModulesLog = new Group(composite1, SWT.NONE);
		fd_grpExecutedModules.right = new FormAttachment(grpModulesLog, -6);

		grpModulesLog.setLayout(new FormLayout());

		FormData fd_grpModulesLog = new FormData();
		fd_grpModulesLog.top = new FormAttachment(0, 11);
		fd_grpModulesLog.left = new FormAttachment(0, 854);
		fd_grpModulesLog.right = new FormAttachment(100, -10);

		grpModulesLog.setLayoutData(fd_grpModulesLog);

		grpModulesLog.setText("Executed Modules");

		Group grpAvailableTargets = new Group(composite1, SWT.NONE);
		fd_grpShellcodeConsole.right = new FormAttachment(100, -518);

		ShellcodeConsole = new Text(grpShellcodeConsole, SWT.BORDER | SWT.MULTI);
		ShellcodeConsole.setToolTipText("Shellcode Console - Built in");
		FormData fd_ShellcodeConsole = new FormData();
		fd_ShellcodeConsole.top = new FormAttachment(0, 11);
		fd_ShellcodeConsole.right = new FormAttachment(100, -7);
		fd_ShellcodeConsole.left = new FormAttachment(0, 7);
		ShellcodeConsole.setLayoutData(fd_ShellcodeConsole);
		ShellcodeConsole.setForeground(SWTResourceManager
				.getColor(SWT.COLOR_GREEN));
		ShellcodeConsole.setBackground(SWTResourceManager
				.getColor(SWT.COLOR_BLACK));
		ShellcodeConsole.setEditable(false);
		ShellcodeConsole
				.setText("=> Welcome to Exploit Pack console Built-In Exploit Pack 2.2.0a\n=> WARNING: ALPHA RELEASE - Bugs are EVERYWHERE!\n=>\r\n=> The programs or scripts included with Exploit Pack are free software;\r\n=> the exact distribution terms for each one are described in the individual files\r\n=> \r\n=> Exploit Pack comes with ABSOLUTELY NO WARRANTY, for this piece of software\r\n=> to the extend permitted by applicable law\r\n=> Shellcode console says: Type ? for help\r\n");
		ShellcodeConsole.append("=> \n");
		ShellcodeConsole.setTopIndex(-1);
		ShellcodeInput = new Text(grpShellcodeConsole, SWT.BORDER);
		fd_ShellcodeConsole.bottom = new FormAttachment(ShellcodeInput, -9);
		FormData fd_ShellcodeInput = new FormData();
		fd_ShellcodeInput.left = new FormAttachment(0, 7);
		fd_ShellcodeInput.top = new FormAttachment(100, -30);
		fd_ShellcodeInput.bottom = new FormAttachment(100, -8);
		ShellcodeInput.setLayoutData(fd_ShellcodeInput);

		// Handle the Shell code console input
		ShellcodeInput.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {

				int code = e.keyCode;

				String Switch = ShellcodeInput.getText();

				if (code == 13) {

					// Connect
					if ((Switch.equals("connect") || (Switch.equals("c")) || (Switch
							.equals("y"))))

					{

						ShellcodeConsole
								.setText("=> Connecting to the target: "
										+ TargetHost.getText() + "\n");
						ShellcodeConsole
								.append("=> Please wait while I open a console for you\n");
						Connect.main(null, TargetHost.getText(), AgentPort);

						// Clean input
						ShellcodeInput.setText("");

					}

					// Connect
					if ((Switch.equals("check") || (Switch.equals("chk"))))

					{
						ShellcodeConsole
								.setText("=> Checking shellcode connection"
										+ "\n");
						final String scannerHost = TargetHost.getText();
						final int scannerPort = Integer.parseInt(AgentPort
								.toString());

						// Threads for scanner
						final Runnable print = new Runnable() {
							public void run() {
								ShellcodeConsole.append("=> Shellcode status: "
										+ shellaftercheck + "\n");
							}
						};

						final Thread applicationThread = new Thread(
								"applicationThread") {
							public void run() {
								try {
									Socket socket = new Socket();
									socket.connect(new InetSocketAddress(
											scannerHost, scannerPort), 900);
									shellaftercheck = "Ready";

								} catch (IOException ex) {
									System.out.println(ex);
									shellaftercheck = "Close";
								}
								shlExploitPack.getDisplay().syncExec(print);
							}
						};
						applicationThread.start();

						// Clean input
						ShellcodeInput.setText("");

					}

					// Help
					if ((Switch.equals("help") || (Switch.equals("h") || (Switch
							.equals("?")))))

					{
						ShellcodeConsole.setText("=> Base commands :\n");
						ShellcodeConsole.append("=> Help menu: ? or help\n");
						ShellcodeConsole
								.append("=> List sessions: ls or sessions\n");
						ShellcodeConsole
								.append("=> Connect to: c or connect\n");
						ShellcodeConsole
								.append("=> Check shellcode: check or chk\n");
						ShellcodeConsole
								.append("=> Disconnect from: d or disconnect\n");
						ShellcodeConsole.append("=> Version: v or version\n");
						// Clean input
						ShellcodeInput.setText("");
					}

					// Session list
					if ((Switch.equals("session") || (Switch.equals("s") || (Switch
							.equals("ls")))))

					{
						ShellcodeConsole.setText("=> Active sessions: \n");
						// Clean input
						ShellcodeInput.setText("");
					}

					// Version
					if ((Switch.equals("version") || (Switch.equals("v"))))

					{
						ShellcodeConsole
								.setText("=> Exploit Pack - Security Framework\n");
						ShellcodeConsole.append("=> Author: Juan Sacco\n");
						ShellcodeConsole.append("=> Version "
								+ CurrentAppVersion + "\n");
						// Clean input
						ShellcodeInput.setText("");
					}

					// Disconnect
					if ((Switch.equals("disconnect") || (Switch.equals("d")) || (Switch
							.equals("n"))))

					{
						ShellcodeConsole.setText("=> Closing connection from "
								+ TargetHost.getText() + "\n");
						ShellcodeConsole.append("=> Done.\n");
						// Clean input
						ShellcodeInput.setText("");
					}

					// Clean input
					ShellcodeInput.setText("");
				}

			}

		});

		ShellcodeInput.addMouseListener(new MouseAdapter() {

			@Override
			public void mouseDown(MouseEvent e) {

				String CheckInput = ShellcodeInput.getText();

				System.out.print(CheckInput);

				ShellcodeInput.setText("");

			}

		});

		ShellcodeInput.setText("Type your command here..");

		ShellcodeInput.setForeground(SWTResourceManager.getColor(255, 0, 255));

		formToolkit.adapt(ShellcodeInput, true, true);

		Button btnNewButton = new Button(grpShellcodeConsole, SWT.NONE);
		fd_ShellcodeInput.right = new FormAttachment(100, -58);
		FormData fd_btnNewButton = new FormData();
		fd_btnNewButton.left = new FormAttachment(ShellcodeInput, 6);
		fd_btnNewButton.right = new FormAttachment(100, -11);
		fd_btnNewButton.top = new FormAttachment(100, -32);
		fd_btnNewButton.bottom = new FormAttachment(100, -8);
		btnNewButton.setLayoutData(fd_btnNewButton);

		formToolkit.adapt(btnNewButton, true, true);

		btnNewButton.setText("Go");

		FormData fd_grpAvailableTargets = new FormData();
		fd_grpAvailableTargets.bottom = new FormAttachment(grpShellcodeConsole, 0, SWT.BOTTOM);
		fd_grpAvailableTargets.left = new FormAttachment(grpShellcodeConsole, 6);
		fd_grpAvailableTargets.top = new FormAttachment(grpExecutedModules, 6);

		final Tree ExecutedModules = new Tree(grpExecutedModules, SWT.SINGLE
				| SWT.BORDER);
		ExecutedModules.setLinesVisible(true);
		ExecutedModules.setToolTipText("Executed Modules - Time and state");

		FormData fd_tree111 = new FormData();

		fd_tree111.top = new FormAttachment(0, 5);

		fd_tree111.left = new FormAttachment(0, 7);

		fd_tree111.bottom = new FormAttachment(100, -5);

		fd_tree111.right = new FormAttachment(100, -7);

		ExecutedModules.setLayoutData(fd_tree111);

		final TreeItem ExecuteModulesNode = new TreeItem(ExecutedModules,
				SWT.NONE, 0);

		ExecuteModulesNode.setImage(SWTResourceManager.getImage(
				MainWindow.class, "/resources/application.png"));

		ExecuteModulesNode.setText("Modules State View");

		final Tree ModulesLog = new Tree(grpModulesLog, SWT.SINGLE | SWT.BORDER);
		ModulesLog.setLinesVisible(true);
		ModulesLog.setToolTipText("Log activities");

		FormData fd_ModulesLog = new FormData();

		fd_ModulesLog.bottom = new FormAttachment(100, -7);

		fd_ModulesLog.right = new FormAttachment(100, -10);

		fd_ModulesLog.top = new FormAttachment(0, 5);

		fd_ModulesLog.left = new FormAttachment(0, 10);

		ModulesLog.setLayoutData(fd_ModulesLog);

		final TreeItem ModulesLogNode = new TreeItem(ModulesLog, SWT.NONE, 0);

		ModulesLogNode.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/binary.png"));

		ModulesLogNode.setText("Modules Load Status: Ok");

		grpAvailableTargets.setLayout(new FormLayout());

		grpAvailableTargets.setLayoutData(fd_grpAvailableTargets);

		grpAvailableTargets.setText("Available Targets");

		final Tree TreeAvailableTargets = new Tree(grpAvailableTargets,
				SWT.SINGLE | SWT.BORDER);
		FormData fd_TreeAvailableTargets = new FormData();
		fd_TreeAvailableTargets.top = new FormAttachment(0, 10);
		fd_TreeAvailableTargets.right = new FormAttachment(100, -6);
		fd_TreeAvailableTargets.left = new FormAttachment(0, 10);
		fd_TreeAvailableTargets.bottom = new FormAttachment(100, -8);
		TreeAvailableTargets.setLayoutData(fd_TreeAvailableTargets);
		TreeAvailableTargets.setSortDirection(SWT.UP);
		TreeAvailableTargets.setToolTipText("Right Click for Menu");
		TreeAvailableTargets.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseDown(MouseEvent e) {
				TreeAvailableTargets.addListener(SWT.MenuDetect,
						new Listener() {
							@Override
							public void handleEvent(
									org.eclipse.swt.widgets.Event event) {

								// We need a Shell as the parent of our menu
								final Shell shlSysTray = new Shell(
										event.display);
								// Style must be pop up
								Menu m = new Menu(shlSysTray, SWT.POP_UP);
								// Creates a new menu item that terminates the
								// program
								// when selected
								MenuItem restore = new MenuItem(m, SWT.NONE);
								restore.setText("Check connection");
								restore.addListener(SWT.Selection,
										new Listener() {
											@Override
											public void handleEvent(Event event) {

												ShellcodeConsole
														.setText("=> Checking shellcode connection"
																+ "\n");
												final String scannerHost = TargetHost
														.getText();
												final int scannerPort = Integer
														.parseInt(AgentPort
																.toString());

												// Threads for scanner
												final Runnable print = new Runnable() {
													public void run() {
														ShellcodeConsole
																.append("=> Shellcode status: "
																		+ shellaftercheck
																		+ "\n");
													}
												};

												final Thread applicationThread = new Thread(
														"applicationThread") {
													public void run() {
														try {
															Socket socket = new Socket();
															socket.connect(
																	new InetSocketAddress(
																			scannerHost,
																			scannerPort),
																	900);
															shellaftercheck = "Ready";

														} catch (IOException ex) {
															System.out
																	.println(ex);
															shellaftercheck = "Close";
														}
														shlExploitPack
																.getDisplay()
																.syncExec(print);
													}
												};
												applicationThread.start();

												// Clean input
												ShellcodeInput.setText("");
												shlSysTray.dispose();
											}
										});

								MenuItem help = new MenuItem(m, SWT.NONE);
								help.setText("Connect");
								help.addListener(SWT.Selection, new Listener() {
									@Override
									public void handleEvent(Event event) {
										Connect.main(null,
												TargetHost.getText(), AgentPort);
									}
								});
								MenuItem about = new MenuItem(m, SWT.NONE);
								about.setText("Disconnect");
								about.addListener(SWT.Selection,
										new Listener() {
											@Override
											public void handleEvent(Event event) {
												About.main(null);
											}
										});
								// We need to make the menu visible
								m.setVisible(true);
							};
						});
			}
		});

		final TreeItem AvailableTargets = new TreeItem(TreeAvailableTargets,
				SWT.NONE, 0);

		AvailableTargets.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/computer.png"));

		AvailableTargets.setText("Local IP ( 127.0.0.1 )");

		Group grpNetworkScanner = new Group(composite1, SWT.NONE);
		fd_grpModulesLog.bottom = new FormAttachment(grpNetworkScanner, -6);
		grpNetworkScanner.setText("Network Scanner");
		grpNetworkScanner.setLayout(new FormLayout());
		FormData fd_grpNetworkScanner = new FormData();
		fd_grpNetworkScanner.bottom = new FormAttachment(grpShellcodeConsole, 0, SWT.BOTTOM);
		fd_grpNetworkScanner.right = new FormAttachment(100, -10);
		fd_grpNetworkScanner.left = new FormAttachment(grpAvailableTargets, 6);
		fd_grpNetworkScanner.top = new FormAttachment(0, 204);
		grpNetworkScanner.setLayoutData(fd_grpNetworkScanner);
		formToolkit.paintBordersFor(grpNetworkScanner);

		TreeViewer treeViewer = new TreeViewer(grpNetworkScanner, SWT.SINGLE
				| SWT.BORDER);
		Tree TreePortScanner = treeViewer.getTree();
		FormData fd_TreePortScanner = new FormData();
		fd_TreePortScanner.right = new FormAttachment(100, -12);
		fd_TreePortScanner.bottom = new FormAttachment(100, -10);
		fd_TreePortScanner.top = new FormAttachment(0, 10);
		fd_TreePortScanner.left = new FormAttachment(0, 10);
		TreePortScanner.setLayoutData(fd_TreePortScanner);
		TreePortScanner.setLinesVisible(true);
		TreePortScanner.setToolTipText("Network mapper");
		formToolkit.paintBordersFor(TreePortScanner);

		final TreeItem OpenPorts = new TreeItem(TreePortScanner, SWT.NONE);
		OpenPorts.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/port.png"));
		OpenPorts.setText("Open Ports ( " + ipAddrStr + " )");

		TabItem tbtmHttpFuzzer = new TabItem(tabFolder, SWT.NONE);

		tbtmHttpFuzzer.setText("HTTP Fuzzer");

		Composite composite_1 = new Composite(tabFolder, SWT.NONE);
		composite_1.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		tbtmHttpFuzzer.setControl(composite_1);

		composite_1.setLayout(new FormLayout());

		Label lblMethod = formToolkit.createLabel(composite_1, "Method:",

		SWT.NONE);
		lblMethod.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		FormData fd_lblMethod = new FormData();
		fd_lblMethod.top = new FormAttachment(0, 10);
		fd_lblMethod.right = new FormAttachment(0, 71);
		fd_lblMethod.left = new FormAttachment(0, 10);

		lblMethod.setLayoutData(fd_lblMethod);

		Label lblProtocol = formToolkit.createLabel(composite_1, "Protocol:",

		SWT.NONE);
		lblProtocol.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		FormData fd_lblProtocol = new FormData();
		fd_lblProtocol.right = new FormAttachment(0, 228);

		lblProtocol.setLayoutData(fd_lblProtocol);

		Combo combo_1 = new Combo(composite_1, SWT.NONE);
		combo_1.setItems(new String[] { "HTTP/1.1", "HTTP/1.0" });

		FormData fd_combo_1 = new FormData();
		fd_combo_1.right = new FormAttachment(lblProtocol, 107, SWT.RIGHT);
		fd_combo_1.left = new FormAttachment(lblProtocol, 6);
		fd_combo_1.top = new FormAttachment(0, 7);

		combo_1.setLayoutData(fd_combo_1);

		formToolkit.adapt(combo_1);

		formToolkit.paintBordersFor(combo_1);

		Label lblNewLabel = formToolkit.createLabel(composite_1, "Web URL:",

		SWT.NONE);
		lblNewLabel.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));
		combo_1.setText("HTTP/1.1");

		FormData fd_lblNewLabel = new FormData();
		fd_lblNewLabel.left = new FormAttachment(combo_1, 6);
		fd_lblNewLabel.bottom = new FormAttachment(lblMethod, 0, SWT.BOTTOM);
		fd_lblNewLabel.top = new FormAttachment(0, 10);

		lblNewLabel.setLayoutData(fd_lblNewLabel);

		Label lblPostData = formToolkit.createLabel(composite_1, "Post Data:",

		SWT.NONE);
		lblPostData.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		FormData fd_lblPostData = new FormData();
		fd_lblPostData.right = new FormAttachment(lblNewLabel, 0, SWT.RIGHT);

		lblPostData.setLayoutData(fd_lblPostData);

		Button btnCheckButton = new Button(composite_1, SWT.CHECK);
		fd_lblPostData.bottom = new FormAttachment(btnCheckButton, 0, SWT.BOTTOM);
		fd_lblPostData.left = new FormAttachment(btnCheckButton, 25);
		fd_combo_1.bottom = new FormAttachment(btnCheckButton, -4);
		fd_lblProtocol.bottom = new FormAttachment(btnCheckButton, -13);
		fd_lblMethod.bottom = new FormAttachment(btnCheckButton, -13);

		FormData fd_btnCheckButton = new FormData();
		fd_btnCheckButton.right = new FormAttachment(0, 314);
		fd_btnCheckButton.left = new FormAttachment(0, 10);

		btnCheckButton.setLayoutData(fd_btnCheckButton);

		formToolkit.adapt(btnCheckButton, true, true);

		btnCheckButton.setText("Enable Post Data type for Requests");
		btnCheckButton
				.setBackground(SWTResourceManager.getColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));

		ResponseData = new Text(composite_1, SWT.BORDER | SWT.V_SCROLL
				| SWT.MULTI);
		fd_btnCheckButton.bottom = new FormAttachment(ResponseData, -6);

		FormData fd_ResponseData = new FormData();
		fd_ResponseData.top = new FormAttachment(0, 75);
		fd_ResponseData.bottom = new FormAttachment(100, -10);
		fd_ResponseData.left = new FormAttachment(0, 10);

		fd_ResponseData.right = new FormAttachment(100, -10);

		ResponseData.setLayoutData(fd_ResponseData);

		formToolkit.adapt(ResponseData, true, true);

		Combo ComboMethod = new Combo(composite_1, SWT.NONE);
		fd_lblProtocol.left = new FormAttachment(0, 161);
		ComboMethod.setItems(new String[] { "GET", "POST" });
		ComboMethod.setBackground(SWTResourceManager.getColor(247, 246, 246));

		FormData fd_ComboMethod = new FormData();
		fd_ComboMethod.right = new FormAttachment(0, 155);
		fd_ComboMethod.top = new FormAttachment(0, 7);
		fd_ComboMethod.left = new FormAttachment(0, 77);

		ComboMethod.setLayoutData(fd_ComboMethod);

		formToolkit.adapt(ComboMethod);

		formToolkit.paintBordersFor(ComboMethod);
		ComboMethod.setText("GET");

		WebURL = new Text(composite_1, SWT.BORDER);
		fd_lblNewLabel.right = new FormAttachment(WebURL, -6);
		WebURL.setText("http://www.exploitpack.com/");
		FormData fd_WebURL = new FormData();
		fd_WebURL.top = new FormAttachment(0, 10);
		fd_WebURL.left = new FormAttachment(0, 414);
		WebURL.setLayoutData(fd_WebURL);
		formToolkit.adapt(WebURL, true, true);

		Button GoWebFuzz = new Button(composite_1, SWT.NONE);
		fd_WebURL.right = new FormAttachment(GoWebFuzz, -6);
		GoWebFuzz.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {

				try {

					// Create a URL to check app version
					URL url = new URL(WebURL.getText());

					// Read all the text returned by the server
					BufferedReader in = new BufferedReader(
							new InputStreamReader(url.openStream()));
					ResponseData.setText("");
					while ((in.readLine() != null)) {
						if (in.readLine() != null) {
							ResponseData.append(in.readLine() + "\n");
						}
						if (in.readLine() == "null") {
							return;
						}
					}

				} catch (Exception e2) {
					System.out.println(e2);
				}
			}
		});
		FormData fd_GoWebFuzz = new FormData();
		fd_GoWebFuzz.left = new FormAttachment(100, -112);
		fd_GoWebFuzz.bottom = new FormAttachment(0, 33);
		fd_GoWebFuzz.top = new FormAttachment(0, 8);
		fd_GoWebFuzz.right = new FormAttachment(100, -10);
		GoWebFuzz.setLayoutData(fd_GoWebFuzz);
		formToolkit.adapt(GoWebFuzz, true, true);
		GoWebFuzz.setText("Request");

		PostData = new Text(composite_1, SWT.BORDER);
		fd_WebURL.bottom = new FormAttachment(PostData, -14);
		FormData fd_PostData = new FormData();
		fd_PostData.left = new FormAttachment(lblPostData, 6);
		fd_PostData.right = new FormAttachment(100, -10);
		fd_PostData.bottom = new FormAttachment(ResponseData, -9);
		fd_PostData.top = new FormAttachment(GoWebFuzz, 12);
		PostData.setLayoutData(fd_PostData);
		formToolkit.adapt(PostData, true, true);

		TabItem tbtmWebBrowser = new TabItem(tabFolder, SWT.NONE);
		tbtmWebBrowser.setText("Web Browser");

		Composite composite_6 = new Composite(tabFolder, SWT.NONE);
		tbtmWebBrowser.setControl(composite_6);
		formToolkit.paintBordersFor(composite_6);
		composite_6.setLayout(new FormLayout());

		Label lblNewLabel_5 = new Label(composite_6, SWT.NONE);
		FormData fd_lblNewLabel_5 = new FormData();
		fd_lblNewLabel_5.bottom = new FormAttachment(0, 30);
		fd_lblNewLabel_5.top = new FormAttachment(0, 15);
		fd_lblNewLabel_5.left = new FormAttachment(0, 988);
		lblNewLabel_5.setLayoutData(fd_lblNewLabel_5);
		lblNewLabel_5.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/updatebrowser.png"));
		formToolkit.adapt(lblNewLabel_5, true, true);
		final Browser EBrowser = new Browser(composite_6, SWT.BORDER);
		FormData fd_EBrowser = new FormData();
		fd_EBrowser.left = new FormAttachment(0, 10);
		fd_EBrowser.bottom = new FormAttachment(0, 407);
		fd_EBrowser.top = new FormAttachment(0, 36);
		EBrowser.setLayoutData(fd_EBrowser);
		EBrowser.setUrl("http://exploitpack.com");
		formToolkit.adapt(EBrowser);
		formToolkit.paintBordersFor(EBrowser);

		Button btnBrowser = new Button(composite_6, SWT.NONE);
		fd_EBrowser.right = new FormAttachment(btnBrowser, 0, SWT.RIGHT);
		FormData fd_btnBrowser = new FormData();
		fd_btnBrowser.bottom = new FormAttachment(0, 32);
		fd_btnBrowser.right = new FormAttachment(0, 1080);
		fd_btnBrowser.top = new FormAttachment(0, 9);
		fd_btnBrowser.left = new FormAttachment(0, 1010);
		btnBrowser.setLayoutData(fd_btnBrowser);
		btnBrowser.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				EBrowser.setUrl(URLBrowser.getText());
			}
		});
		formToolkit.adapt(btnBrowser, true, true);
		btnBrowser.setText("Request");

		URLBrowser = new Text(composite_6, SWT.BORDER);
		FormData fd_URLBrowser = new FormData();
		fd_URLBrowser.bottom = new FormAttachment(0, 30);
		fd_URLBrowser.right = new FormAttachment(0, 1004);
		fd_URLBrowser.top = new FormAttachment(0, 9);
		fd_URLBrowser.left = new FormAttachment(0, 10);
		URLBrowser.setLayoutData(fd_URLBrowser);
		URLBrowser.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				int code = e.keyCode;

				if (code == 13) {
					EBrowser.setUrl(URLBrowser.getText());
				}

			}
		});
		URLBrowser.setText("http://www.exploitpack.com");
		formToolkit.adapt(URLBrowser, true, true);

		TabItem tbtmCheckWebsite = new TabItem(tabFolder, SWT.NONE);
		tbtmCheckWebsite.setText("Check Website");

		Composite composite_7 = new Composite(tabFolder, SWT.NONE);
		tbtmCheckWebsite.setControl(composite_7);
		formToolkit.paintBordersFor(composite_7);

		Label lblcheckweb = new Label(composite_7, SWT.NONE);
		lblcheckweb.setBackground(SWTResourceManager.getColor(247, 246, 246));
		lblcheckweb.setText("Check this website for me:");
		lblcheckweb.setBounds(10, 15, 127, 15);

		Label label_1 = new Label(composite_7, SWT.NONE);
		label_1.setBackground(SWTResourceManager.getColor(247, 246, 246));
		label_1.setText("Website status:");
		label_1.setBounds(10, 44, 79, 15);

		final Browser checksiteBrowser = new Browser(composite_7, SWT.BORDER);
		checksiteBrowser.setBounds(10, 65, 1049, 360);
		checksiteBrowser.setUrl("http://exploitpack.com");
		formToolkit.paintBordersFor(checksiteBrowser);

		urlToCheck = new Text(composite_7, SWT.BORDER);
		urlToCheck.setBounds(143, 12, 835, 21);
		urlToCheck.setText("http://exploitpack.com");
		formToolkit.adapt(urlToCheck, true, true);

		final Label imgUP = new Label(composite_7, SWT.NONE);
		imgUP.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/webup.gif"));
		imgUP.setBounds(95, 36, 24, 23);
		formToolkit.adapt(imgUP, true, true);

		final Label siteStatusText = new Label(composite_7, SWT.NONE);
		siteStatusText
				.setBackground(SWTResourceManager.getColor(247, 246, 246));
		siteStatusText.setText("It's just you");
		siteStatusText.setBounds(125, 44, 261, 15);
		siteStatusText.setText("It's just you " + urlToCheck.getText()
				+ " looks up from here");

		Label imgDOWN = new Label(composite_7, SWT.NONE);
		imgDOWN.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/webdown.gif"));
		imgDOWN.setBounds(95, 36, 24, 23);
		imgDOWN.setBackground(SWTResourceManager.getColor(247, 246, 246));

		Button button = new Button(composite_7, SWT.NONE);
		button.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				// Show website
				checksiteBrowser.setUrl(urlToCheck.getText());

				try {

					// Create a URL to check availability

					URL url = new URL("http://www.isup.me/"
							+ urlToCheck.getText());

					// Read all the text returned by the server

					BufferedReader in = new BufferedReader(

					new InputStreamReader(url.openStream()));

					String upornot;

					while ((upornot = in.readLine()) != null) {

						if (upornot.contains("It's not just you!  ")) {
							imgUP.setVisible(false);
							siteStatusText.setText("It's not just you "
									+ urlToCheck.getText()
									+ " looks down from here");
							checksiteBrowser
									.setUrl("http://www.exploitpack.com/dostest.html");
							System.out.println("DOWN");
							break;
						} else {
							imgUP.setVisible(true);
							siteStatusText.setText("It's just you "
									+ urlToCheck.getText()
									+ " looks up from here");
							System.out.println("UP");
						}

						System.out.println(upornot);
					}

					in.close();

				} catch (MalformedURLException e1) {

				} catch (IOException e1) {

				}

			}
		});
		button.setText("Check");
		button.setBounds(984, 10, 75, 25);
		formToolkit.adapt(button, true, true);

		Label lblUsingIsupmeAs = new Label(composite_7, SWT.NONE);
		lblUsingIsupmeAs.setBounds(917, 44, 142, 15);
		formToolkit.adapt(lblUsingIsupmeAs, true, true);
		lblUsingIsupmeAs.setText("as engine to check availability");
		lblUsingIsupmeAs.setBackground(SWTResourceManager.getColor(247, 246,
				246));

		Label lblUsing = new Label(composite_7, SWT.NONE);
		lblUsing.setBounds(830, 44, 30, 15);
		formToolkit.adapt(lblUsing, true, true);
		lblUsing.setText("Using");
		lblUsing.setBackground(SWTResourceManager.getColor(247, 246, 246));

		Label lblIsupme = new Label(composite_7, SWT.NONE);
		lblIsupme.setFont(SWTResourceManager.getFont("Segoe UI", 9, SWT.BOLD));
		lblIsupme.setBounds(866, 43, 45, 15);
		formToolkit.adapt(lblIsupme, true, true);
		lblIsupme.setText("isup.me");
		lblIsupme.setBackground(SWTResourceManager.getColor(247, 246, 246));

		TabItem tbtmNewItem_1 = new TabItem(tabFolder, SWT.NONE);

		tbtmNewItem_1.setText("Changelog");

		Composite composite_2 = new Composite(tabFolder, SWT.NONE);
		tbtmNewItem_1.setControl(composite_2);

		composite_2.setLayout(new FormLayout());

		Browser News = new Browser(composite_2, SWT.NONE);

		FormData fd_News = new FormData();

		fd_News.bottom = new FormAttachment(100);

		fd_News.right = new FormAttachment(100);

		fd_News.top = new FormAttachment(0);

		fd_News.left = new FormAttachment(0);

		News.setLayoutData(fd_News);

		News.setUrl("http://exploitpack.com/changelog/");

		banner = new CBanner(shlExploitPack, SWT.NONE);
		FormData fd_banner = new FormData();
		fd_banner.top = new FormAttachment(0, 3);
		fd_banner.left = new FormAttachment(0, 662);
		banner.setLayoutData(fd_banner);

		TabFolder InfoLogFolder = new TabFolder(shlExploitPack, SWT.NONE);
		FormData fd_InfoLogFolder = new FormData();
		fd_InfoLogFolder.right = new FormAttachment(100, -10);
		fd_InfoLogFolder.top = new FormAttachment(tabFolder, 6);
		fd_InfoLogFolder.bottom = new FormAttachment(100, -39);
		InfoLogFolder.setLayoutData(fd_InfoLogFolder);

		TabItem tbtmNewItem_2 = new TabItem(InfoLogFolder, SWT.NONE);
		tbtmNewItem_2.setText("Quick Information");
		Composite composite_3 = new Composite(InfoLogFolder, SWT.NONE);
		tbtmNewItem_2.setControl(composite_3);
		formToolkit.paintBordersFor(composite_3);
		composite_3.setLayout(new FormLayout());

		// Load of Quick Information
		QuickInformation = new Text(composite_3, SWT.BORDER | SWT.V_SCROLL | SWT.MULTI);
		QuickInformation.setEditable(false);
		QuickInformation.setLayoutData(new FormData());
		QuickInformation
				.setText("[" + LogTime + "]" + " Application started\n");
		QuickInformation.append("[" + LogTime + "]" + " Internals check: Ok\n");
		QuickInformation.append("[" + LogTime + "]" + " Running...\n");

		FormData fd_QuickInformation = new FormData();
		fd_QuickInformation.left = new FormAttachment(0);
		fd_QuickInformation.right = new FormAttachment(100);
		fd_QuickInformation.bottom = new FormAttachment(100);
		fd_QuickInformation.top = new FormAttachment(0);

		QuickInformation.setLayoutData(fd_QuickInformation);
		QuickInformation.setTopIndex(-1);
		formToolkit.adapt(QuickInformation, true, true);
		TabItem tbtmNewItem_3 = new TabItem(InfoLogFolder, SWT.NONE);
		tbtmNewItem_3.setText("Application Log");
		Composite composite_4 = new Composite(InfoLogFolder, SWT.NONE);
		tbtmNewItem_3.setControl(composite_4);
		formToolkit.paintBordersFor(composite_4);
		composite_4.setLayout(new FormLayout());

		ApplicationLog = new Text(composite_4, SWT.BORDER | SWT.V_SCROLL
				| SWT.MULTI);
		FormData fd_ApplicationLog = new FormData();
		fd_ApplicationLog.top = new FormAttachment(0);
		fd_ApplicationLog.bottom = new FormAttachment(100);
		fd_ApplicationLog.right = new FormAttachment(100);
		fd_ApplicationLog.left = new FormAttachment(0);
		ApplicationLog.setLayoutData(fd_ApplicationLog);

		formToolkit.adapt(ApplicationLog, true, true);
		TabItem tbtmNewItem_4 = new TabItem(InfoLogFolder, SWT.NONE);
		tbtmNewItem_4.setText("Debug Log");
		Composite composite_5 = new Composite(InfoLogFolder, SWT.NONE);
		tbtmNewItem_4.setControl(composite_5);
		formToolkit.paintBordersFor(composite_5);
		composite_5.setLayout(new FormLayout());

		DebugLog = new Text(composite_5, SWT.BORDER | SWT.V_SCROLL | SWT.MULTI);
		FormData fd_DebugLog = new FormData();
		fd_DebugLog.bottom = new FormAttachment(100);
		fd_DebugLog.right = new FormAttachment(100);
		fd_DebugLog.top = new FormAttachment(0);
		fd_DebugLog.left = new FormAttachment(0);
		DebugLog.setLayoutData(fd_DebugLog);

		// Load of Application Log
		ApplicationLog.setText("[" + LogTime + "]" + " Log started\n");
		ApplicationLog.append("[" + LogTime + "]" + " Internals check: OK\n");
		ApplicationLog.append("[" + LogTime + "]" + " Running...\n");

		// Load of Debug Log
		DebugLog.setText("[" + LogTime + "]" + " Debug Log started\n");
		DebugLog.append("[" + LogTime + "]" + " Internals check: OK\n");
		DebugLog.append("[" + LogTime + "]" + " Running...\n");

		formToolkit.adapt(DebugLog, true, true);

		btnLaunch = new Button(shlExploitPack, SWT.NONE);
		fd_InfoLogFolder.left = new FormAttachment(btnLaunch, 6);
		FormData fd_btnLaunch = new FormData();
		fd_btnLaunch.bottom = new FormAttachment(InfoLogFolder, 0, SWT.BOTTOM);
		fd_btnLaunch.right = new FormAttachment(0, 299);
		fd_btnLaunch.left = new FormAttachment(0, 10);
		btnLaunch.setLayoutData(fd_btnLaunch);

		TreeExploits = new Tree(shlExploitPack, SWT.SINGLE | SWT.BORDER);
		fd_btnLaunch.top = new FormAttachment(TreeExploits, 6);
		fd_tabFolder.left = new FormAttachment(0, 305);
		FormData fd_TreeExploits = new FormData();
		fd_TreeExploits.left = new FormAttachment(0, 10);
		fd_TreeExploits.right = new FormAttachment(tabFolder, -6);
		fd_TreeExploits.bottom = new FormAttachment(100, -70);
		TreeExploits.setLayoutData(fd_TreeExploits);
		TreeExploits.setToolTipText("Modules Explorer - Exploits and Tools");

		// SELECCION DEL ARBOL
		TreeExploits.addListener(SWT.Selection, new Listener() {
			@Override
			public void handleEvent(Event e) {
				try {
					ExploitSelection = "";
					TreeItem[] selection = TreeExploits.getSelection();
					for (int i = 0; i < selection.length; i++)
						ExploitSelection += selection[i];

					ExploitSelection = ExploitSelection.replaceAll("TreeItem",
							"");
					ExploitSelection = ExploitSelection.toString().replaceAll(
							"\\{", "");
					ExploitSelection = ExploitSelection.toString().replaceAll(
							"\\}", "");
					ExploitSelection = ExploitSelection.toString().substring(1,
							ExploitSelection.length());
					// Check if the selected item is part of these categories
					if (ExploitSelection.equals("Exploits")
							|| ExploitSelection.equals("Windows")
							|| ExploitSelection.equals("BSD")
							|| ExploitSelection.equals("Unix")
							|| ExploitSelection.equals("Linux")
							|| ExploitSelection.equals("Tools")
							|| ExploitSelection.equals("Search")
							|| ExploitSelection.equals("History")) {
						return;
					} else {

						if (LastTreeItemSelected != null) {
							LastTreeItemSelected.setImage(SWTResourceManager
									.getImage(MainWindow.class,
											"/resources/square_redS.gif"));

						}

						TreeItem ItemSelected = TreeExploits.getSelection()[0];
						ItemSelected.setImage(SWTResourceManager.getImage(
								MainWindow.class,
								"/resources/square_yellowS.gif"));
						LastTreeItemSelected = ItemSelected;

						// QuickInformation
						ExploitSelection = ExploitSelection.concat(".xml");
						try {
							// Clean QuickInformation
							QuickInformation.setText("");

							// Start de la clase main de XMLTreenode
							NewXMLNode.main(null, ExploitSelection);
							QuickInformation.append("Exploit Name: "
									+ NewXMLNode.ExploitName + " ");
							QuickInformation.append("Author: "
									+ NewXMLNode.Author + "\n");
							QuickInformation.append("Type: "
									+ NewXMLNode.ExploitType + "\n");
							QuickInformation.append("CVE: "
									+ NewXMLNode.Vulnerability + "\n");
							QuickInformation.append("Disclosure Date: "
									+ NewXMLNode.Date);
							QuickInformation.append(NewXMLNode.Information);
							QuickInformation.setTopIndex(100);

							// Set variables from XML
							ExploitModule = NewXMLNode.ExploitName;
							ExploitCodeName = NewXMLNode.CodeName;
							ExploitType = NewXMLNode.ExploitType;
							ExploitPlatform = NewXMLNode.Platform;
							Service = NewXMLNode.Service;
							AgentPort = NewXMLNode.ShellPort;
							TargetPort.setText(NewXMLNode.RemotePort);
							TargetLPort.setText(NewXMLNode.LocalPort);

							// Set shellcodes for comboshell
							// but first initialize combo :D
							ShellcodeCombo.removeAll();
							ShellcodeCombo.setText("Select");
							// Load available shellcodes
							if (NewXMLNode.ShellcodeAvailable.contains("R")) {
								ShellcodeCombo.add("Remote Shell");
							}
							if (NewXMLNode.ShellcodeAvailable.contains("E")) {
								ShellcodeCombo.add("Execute Code");
							}
							if (NewXMLNode.ShellcodeAvailable.contains("C")) {
								ShellcodeCombo.add("Command");
							}
							if (NewXMLNode.ShellcodeAvailable.contains("L")) {
								ShellcodeCombo.add("Local Shell");
							}

						} catch (Exception e2) {
							System.out.print("Sorry error parsing XML" + e2);
						}
					}
				} catch (Exception e2) {
					System.out.println(e2);
				}

			}
		});

		btnLaunch.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {

				// Obtain local time
				Format formatter;
				Date date = new Date();
				formatter = new SimpleDateFormat("hh:mm:ss");
				LogTime = formatter.format(date);

				// Reproduce the wav file when the module is launched
				try {
					// Instance a new sound clip
					Clip sound = AudioSystem.getClip();
					// Open Wav file
					sound.open(AudioSystem.getAudioInputStream(new File(
							"data/newagent.wav")));
					// Start reproduction
					sound.start();
					// Wait until it finished
					while (sound.isRunning())
						Thread.sleep(2000);
					// Close stream
					sound.close();
				} catch (Exception e2) {
					System.out.println(e);
				}
				try {
					if (ExploitSelection.equals("Exploits")
							|| ExploitSelection.equals("Windows")
							|| ExploitSelection.equals("BSD")
							|| ExploitSelection.equals("Unix")
							|| ExploitSelection.equals("Linux")
							|| ExploitSelection.equals("Tools")
							|| ExploitSelection.equals("Search")
							|| ExploitSelection.equals("History")) {
						MessageBox messageBox = new MessageBox(shlExploitPack,
								SWT.ICON_ERROR | SWT.OK);
						messageBox
								.setMessage("Sorry, you have to choose a module to launch");
						messageBox.setText("No Module Selected");
						messageBox.open();
						return;
					}
					// Check if shellcodecombobox has a shellcode selected

					if (!ExploitType.toString().equals("tool")) {
						if (ShellcodeCombo.getText().equals("Select")) {
							MessageBox messageBox = new MessageBox(
									shlExploitPack, SWT.ICON_ERROR | SWT.OK);
							messageBox
									.setMessage("Sorry, you have to choose a shellcode from available list");
							messageBox.setText("No shellcode Selected");
							messageBox.open();
							return;
						}
					}

					// Obtain Python Path
					try {
						// Read file
						FileReader fstream = new FileReader(
								"data/config/exploitpack.config");
						BufferedReader in = new BufferedReader(fstream);
						pythonFullPath = in.readLine() + "\n";
						// Close the output stream
						in.close();
					} catch (Exception e1) {
						// Catch exception if any
						Preferences.main(null);
						System.err.println("Error: " + e1.getMessage());
					}

					// Port Scanner ToDo: Add threads and signature detection
					// Try to make nmap work here, ensure Nmap license is
					// compatible
					// with GPL v3
					if (ExploitCodeName.equals("Remote-Scanner")) {
						ports.clear();
						final String scannerHost = TargetHost.getText();
						OpenPorts.setText("Open Ports ( "
								+ TargetHost.getText() + " )");
						// Add Log to executed modules
						TreeItem ExecuteScannerLog0 = new TreeItem(
								ExecuteModulesNode, SWT.NONE);
						ExecuteScannerLog0.setText("[" + LogTime + "]" + " "
								+ "Scanning host:  " + TargetHost.getText());
						ExecuteScannerLog0.setImage(SWTResourceManager
								.getImage(MainWindow.class,
										"/resources/application.png"));
						// Add Log to executed modules
						TreeItem ExecuteScannerLog3 = new TreeItem(
								ExecuteModulesNode, SWT.NONE);
						ExecuteScannerLog3.setText("[" + LogTime + "]" + " "
								+ "Please wait. This could take a few minutes");
						ExecuteScannerLog3.setImage(SWTResourceManager
								.getImage(MainWindow.class,
										"/resources/application.png"));

						// Threads for scanner
						final Runnable print = new Runnable() {
							public void run() {
								System.out.println("Print from thread: \t"
										+ Thread.currentThread().getName());
								// Read the array and add the elements
								for (int j = 0; j < ports.size(); j++) {
									System.out.println(ports.get(j));
									// Add Available Targets
									TreeItem NewTarget = new TreeItem(
											OpenPorts, SWT.NONE, 0);
									NewTarget.setText(TargetHost.getText()
											+ ":" + ports.get(j));
									NewTarget.setImage(SWTResourceManager
											.getImage(MainWindow.class,
													"/resources/port.png"));
									OpenPorts.setExpanded(true);
								}
								// Add Log to executed modules
								TreeItem ExecuteScannerLog1 = new TreeItem(
										ExecuteModulesNode, SWT.NONE);
								ExecuteScannerLog1.setText("[" + LogTime + "]"
										+ " " + "Scanner has finished");
								ExecuteScannerLog1.setImage(SWTResourceManager
										.getImage(MainWindow.class,
												"/resources/application.png"));

							}
						};

						final Thread applicationThread = new Thread(
								"applicationThread") {
							public void run() {
								System.out.println("Hello from thread: \t"
										+ Thread.currentThread().getName());
								for (port = 0; port <= 1024; port++) {
									try {
										Socket socket = new Socket();
										socket.bind(null);
										socket.connect(new InetSocketAddress(
												scannerHost, port), 900);

										socket.close();
										ports.add(port);

									} catch (IOException ex) {
										System.out.println(ex);
									}
								}
								shlExploitPack.getDisplay().syncExec(print);
								System.out.println("Bye from thread: \t"
										+ Thread.currentThread().getName());

							}
						};
						applicationThread.start();
					}

					// Lauch the desire exploit
					Runtime RunModule = Runtime.getRuntime();
					// Instance OSValidator
					OSValidator CheckOS = new OSValidator();
					CheckOS.main(null);
					OSType = OSValidator.OSType;

					// Local VAR for ModuleType
					String RunModuleByType = null;
					// Local VAR Shellcode selected
					String ShellcodeSelected = null;

					// Shellcode CASE selection
					// Shellcode Remote Shell
					if (ShellcodeCombo.getText().equals("Remote Shell")) {
						ShellcodeSelected = "R";
					}
					// Shellcode execute code
					if (ShellcodeCombo.getText().equals("Execute Code")) {
						ShellcodeSelected = "E";
					}
					// Shellcode command
					if (ShellcodeCombo.getText().equals("Command")) {
						ShellcodeSelected = "C";
					}
					// Shellcode local
					if (ShellcodeCombo.getText().equals("Local Shell")) {
						ShellcodeSelected = "L";
					}
					// Shellcode local
					if (ShellcodeCombo.getText().equals("Select")
							|| ShellcodeCombo.getText().equals("")) {
						ShellcodeSelected = "N";
					}

					if (OSType.equals("Win")) {
						// Execute exploit WINDOWS
						DebugLog.append("[" + LogTime + "]" + " "
								+ "Windows OS - Detected" + "\n");
						try {
							// Set exec options for remote
							if (ExploitType.equals("remote")) {
								RunModuleByType = "cmd.exe /T:0A /K " + "\""
										+ pythonFullPath + "\""
										+ " exploits/code/" + ExploitCodeName
										+ " " + TargetHost.getText() + " "
										+ TargetPort.getText() + " "
										+ ShellcodeSelected;
							}
							// Set exec options for clientside
							if (ExploitType.equals("clientside")) {
								RunModuleByType = "cmd.exe /T:0A /K " + "\""
										+ pythonFullPath + "\""
										+ " exploits/code/" + ExploitCodeName
										+ " " + TargetLhost.getText() + " "
										+ TargetLPort.getText() + " "
										+ ShellcodeSelected;

								// Add location information to ShellcodeConsole
								ShellcodeConsole
										.append("=> New client-side exploit file created\n");
								ShellcodeConsole
										.append("=> File located at: code/output/\n");

							}
							// Set exec options for local
							if (ExploitType.equals("local")) {
								RunModuleByType = "cmd.exe /T:0A /K " + "\""
										+ pythonFullPath + "\""
										+ " exploits/code/" + ExploitCodeName
										+ " " + TargetHost.getText() + " "
										+ TargetPort.getText() + " "
										+ ShellcodeSelected;
							}
							// Set exec options for remote
							if (ExploitType.equals("tool")) {
								RunModuleByType = "cmd.exe /T:0A /K " + "\""
										+ pythonFullPath + "\""
										+ " exploits/code/" + ExploitCodeName
										+ " " + TargetHost.getText() + " "
										+ TargetPort.getText();
							}
							// Print output for exec string value
							DebugLog.append("[" + LogTime + "]" + " "
									+ "Target host: " + TargetHost.getText()
									+ "\n");
							DebugLog.append("[" + LogTime + "]" + " "
									+ "Target port: " + TargetPort.getText()
									+ "\n");
							DebugLog.append("[" + LogTime + "]" + " "
									+ "Executed module: " + ExploitModule
									+ "\n");
							DebugLog.append("[" + LogTime + "]" + " "
									+ "Module Type: " + ExploitType + "\n");
							DebugLog.append("[" + LogTime + "]" + " "
									+ "Shellcode used: "
									+ ShellcodeCombo.getText() + "\n");
							// Finally exec module
							RunModule.exec(RunModuleByType);
							System.out.println(RunModuleByType);

						} catch (IOException e1) {
							DebugLog.append(e1.toString() + "\n");
						}

					} else {
						// Execute exploit LINUX
						DebugLog.append("[" + LogTime + "]" + " "
								+ "Linux OS - Detected" + "\n");
						try {
							// Set exec options for remote
							if (ExploitType.equals("remote")) {
								RunModuleByType = pythonFullPath
										+ " exploits/code/" + ExploitCodeName
										+ " " + TargetHost.getText() + " "
										+ TargetPort.getText() + " "
										+ ShellcodeSelected;
							}
							// Set exec options for clientside
							if (ExploitType.equals("clientside")) {
								RunModuleByType = pythonFullPath
										+ " exploits/code/" + ExploitCodeName
										+ " " + TargetLhost.getText() + " "
										+ TargetLPort.getText() + " "
										+ ShellcodeSelected;

								// Add location information to ShellcodeConsole
								ShellcodeConsole
										.append("=> New client-side exploit file created\n");
								ShellcodeConsole
										.append("=> File located at: code/output/\n");

							}
							// Set exec options for local
							if (ExploitType.equals("local")) {
								RunModuleByType = pythonFullPath
										+ " exploits/code/" + ExploitCodeName
										+ " " + TargetHost.getText() + " "
										+ TargetPort.getText() + " "
										+ ShellcodeSelected;
							}
							// Set exec options for remote
							if (ExploitType.equals("tool")) {
								RunModuleByType = pythonFullPath
										+ " exploits/code/" + ExploitCodeName
										+ " " + TargetHost.getText() + " "
										+ TargetPort.getText();
							}
							// Print output for exec string value
							DebugLog.append("[" + LogTime + "]" + " "
									+ "Target host: " + TargetHost.getText()
									+ "\n");
							DebugLog.append("[" + LogTime + "]" + " "
									+ "Target port: " + TargetPort.getText()
									+ "\n");
							DebugLog.append("[" + LogTime + "]" + " "
									+ "Executed module: " + ExploitModule
									+ "\n");
							DebugLog.append("[" + LogTime + "]" + " "
									+ "Module Type: " + ExploitType + "\n");
							DebugLog.append("[" + LogTime + "]" + " "
									+ "Shellcode used: "
									+ ShellcodeCombo.getText() + "\n");
							// Finally exec module
							RunModule.exec(RunModuleByType);
							System.out.println(RunModuleByType);

						} catch (IOException e1) {
							DebugLog.append(e1.toString() + "\n");
						}

					}

					// Add to shellcodeconsole
					if (!TargetHost.getText().equals("")) {
						if (ShellcodeCombo.getText().equals("Remote Shell")) {
							ShellcodeConsole.append("=> Connect to? " + "["
									+ TargetHost.getText() + "]\n");
							ShellcodeConsole.append("=> [y/n]\n");
							// Add Available Targets
							TreeItem NewTarget = new TreeItem(AvailableTargets,

							SWT.NONE, 0);

							NewTarget.setText(TargetHost.getText());
							NewTarget.setImage(SWTResourceManager.getImage(

							MainWindow.class,

							"/resources/terminal.png"));
							AvailableTargets.setExpanded(true);
						}
					}

					// Add Log to modules log

					TreeItem ModulesModLog0 = new TreeItem(ModulesLog,

					SWT.NONE, 1);

					ModulesModLog0.setText(ExploitModule.toString());
					ModulesModLog0.setImage(SWTResourceManager.getImage(

					MainWindow.class,

					"/resources/binary.png"));

					// Expand modules log
					ModulesLogNode.setExpanded(true);

					// progress bar
/*					progressBar.setMaximum(100);
					progressBar.setSelection(100);
*/
					// Add Log to executed modules

					TreeItem ExecuteModLog0 = new TreeItem(ExecuteModulesNode,
							SWT.NONE);

					ExecuteModLog0.setText("[" + LogTime + "]" + " "
							+ "Beginning execution of: " + ExploitModule);

					ExecuteModLog0.setImage(SWTResourceManager.getImage(
							MainWindow.class, "/resources/application.png"));

					TreeItem ExecuteModLog1 = new TreeItem(ExecuteModulesNode,
							SWT.NONE);

					ExecuteModLog1.setText("[" + LogTime + "]" + " "
							+ "Exploiting trough host: " + ipAddrStr);
					ExecuteModLog1.setImage(SWTResourceManager.getImage(

					MainWindow.class, "/resources/application.png"));

					TreeItem ExecuteModLog2 = new TreeItem(ExecuteModulesNode,
							SWT.NONE);

					ExecuteModLog2.setText("[" + LogTime + "]" + " "
							+ "Module launched: " + ExploitModule);

					ExecuteModLog2.setImage(SWTResourceManager.getImage(
							MainWindow.class, "/resources/application.png"));

					// Expand executed modules
					ExecuteModulesNode.setExpanded(true);
				} catch (Exception e2) {
					System.out.println(e2);
				}

			}
		});

		btnLaunch.setText("Exploit");

		TreeItem NodeExploits = new TreeItem(TreeExploits, SWT.NONE, 0);
		NodeExploits.setExpanded(true);
		NodeExploits.setText("Exploits");
		NodeExploits.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/folder.png"));

		final TreeItem WindowsExploits = new TreeItem(NodeExploits, SWT.NONE, 0);
		WindowsExploits.setText("Windows");
		WindowsExploits.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/folder.png"));
		WindowsExploits.setExpanded(true);
		final TreeItem LinuxExploits = new TreeItem(NodeExploits, SWT.NONE, 1);
		LinuxExploits.setText("Linux");
		LinuxExploits.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/folder.png"));

		final TreeItem UnixExploits = new TreeItem(NodeExploits, 0, 2);
		UnixExploits.setText("Unix");
		UnixExploits.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/folder.png"));

		final TreeItem BSDExploits = new TreeItem(NodeExploits, 0, 3);
		BSDExploits.setText("BSD");
		BSDExploits.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/folder.png"));
		NodeExploits.setExpanded(true);

		final TreeItem CustomExploits = new TreeItem(NodeExploits, 0, 4);
		CustomExploits.setText("Personal");
		CustomExploits.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/folder.png"));

		final TreeItem HomeExploits = new TreeItem(NodeExploits, 0, 5);
		HomeExploits.setText("Data");
		HomeExploits.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/folder.png"));

		NodeExploits.setExpanded(true);
		TreeItem ToolList = new TreeItem(TreeExploits, SWT.NONE, 1);
		ToolList.setText("Tools");
		ToolList.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/folder.png"));

		// TODO un-fix this values
		TreeItem PortScanner = new TreeItem(ToolList, SWT.NONE, 0);
		PortScanner.setText("Remote-Scanner");
		PortScanner.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/square_redS.gif"));

		TreeItem DenialOfService = new TreeItem(ToolList, SWT.NONE, 1);
		DenialOfService.setText("Denial-Of-Service");
		DenialOfService.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/square_redS.gif"));

		final TreeItem SearchExploits = new TreeItem(TreeExploits, SWT.NONE, 2);
		SearchExploits.setText("Search");
		SearchExploits.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/modulesearch.png"));
		SearchExploits.setExpanded(true);

		final TreeItem SearchHistory = new TreeItem(TreeExploits, SWT.NONE, 3);
		SearchHistory.setText("History");
		SearchHistory.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/history.png"));
		SearchHistory.setExpanded(true);

		// GENERO EL ARBOL
		String path = "exploits/";

		String files;
		File folder = new File(path);
		File[] listOfFiles = folder.listFiles();
		QuickInformation.append("[" + LogTime + "] "
				+ "Modules Successfully Loaded: Ok" + "\n");

		for (int i = 0; i < listOfFiles.length; i++) {

			if (listOfFiles[i].isFile()) {
				files = listOfFiles[i].getName();
				if (files.endsWith(".xml") || files.endsWith(".XML")) {
					// Instancio XMLTreenode
					XMLTreenode NewXMLNode = new XMLTreenode();
					// Start de la clase main de XMLTreenode
					NewXMLNode.main(null, files);

					// Create tree item
					// Create Windows Exploits
					if (NewXMLNode.Platform.equals("windows")) {
						TreeItem ItemName = new TreeItem(WindowsExploits,
								SWT.NONE);
						ItemName.setText(NewXMLNode.ExploitName);
						ItemName.setImage(SWTResourceManager.getImage(
								MainWindow.class, "/resources/square_redS.gif"));
					}
					if (NewXMLNode.Platform.equals("linux")) {
						// Create Linux Exploits
						TreeItem ItemName = new TreeItem(LinuxExploits,
								SWT.NONE);
						ItemName.setText(NewXMLNode.ExploitName);
						ItemName.setImage(SWTResourceManager.getImage(
								MainWindow.class, "/resources/square_redS.gif"));
					}
					// Create Unix Exploits
					if (NewXMLNode.Platform.equals("unix")) {
						// Create Linux Exploits
						TreeItem ItemName = new TreeItem(UnixExploits, SWT.NONE);
						ItemName.setText(NewXMLNode.ExploitName);
						ItemName.setImage(SWTResourceManager.getImage(
								MainWindow.class, "/resources/square_redS.gif"));
					}
					// Create BSD Exploits
					if (NewXMLNode.Platform.equals("bsd")) {
						// Create Linux Exploits
						TreeItem ItemName = new TreeItem(UnixExploits, SWT.NONE);
						ItemName.setText(NewXMLNode.ExploitName);
						ItemName.setImage(SWTResourceManager.getImage(
								MainWindow.class, "/resources/square_redS.gif"));
					}

					// Obtain total modules
					TotalModulesLength = i;
					// QuickInformation.append("[" + LogTime + "] "+
					// NewXMLNode.ExploitName + " ");

				}
			}
		}

		QuickInformation.append("[" + LogTime + "] " + "Total Modules: "
				+ TotalModulesLength);

		// REFRESH MODULES TREE
		mntmRefreshModules.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				// remove before refresh
				WindowsExploits.removeAll();
				LinuxExploits.removeAll();
				UnixExploits.removeAll();

				// Generate tree
				String path = "exploits/";

				String files;
				File folder = new File(path);
				File[] listOfFiles = folder.listFiles();

				for (int i = 0; i < listOfFiles.length; i++) {

					if (listOfFiles[i].isFile()) {
						files = listOfFiles[i].getName();
						if (files.endsWith(".xml") || files.endsWith(".XML")) {
							// Instancio XMLTreenode
							XMLTreenode NewXMLNode = new XMLTreenode();
							// Start de la clase main de XMLTreenode
							NewXMLNode.main(null, files);

							// Create tree item
							// Create Windows Exploits
							if (NewXMLNode.Platform.equals("windows")) {
								TreeItem ItemName = new TreeItem(
										WindowsExploits, SWT.NONE);
								ItemName.setText(NewXMLNode.ExploitName);
								ItemName.setImage(SWTResourceManager.getImage(
										MainWindow.class,
										"/resources/square_redS.gif"));
							}
							if (NewXMLNode.Platform.equals("linux")) {
								// Create Linux Exploits
								TreeItem ItemName = new TreeItem(LinuxExploits,
										SWT.NONE);
								ItemName.setText(NewXMLNode.ExploitName);
								ItemName.setImage(SWTResourceManager.getImage(
										MainWindow.class,
										"/resources/square_redS.gif"));
							}
							// Create Unix Exploits
							if (NewXMLNode.Platform.equals("unix")) {
								// Create Linux Exploits
								TreeItem ItemName = new TreeItem(UnixExploits,
										SWT.NONE);
								ItemName.setText(NewXMLNode.ExploitName);
								ItemName.setImage(SWTResourceManager.getImage(
										MainWindow.class,
										"/resources/square_redS.gif"));
							}
							// Create BSD Exploits
							if (NewXMLNode.Platform.equals("bsd")) {
								// Create Linux Exploits
								TreeItem ItemName = new TreeItem(BSDExploits,
										SWT.NONE);
								ItemName.setText(NewXMLNode.ExploitName);
								ItemName.setImage(SWTResourceManager.getImage(
										MainWindow.class,
										"/resources/square_redS.gif"));
							}
						}
					}
				}

				for (int PortNumber : OpenPortsList) {
					// Add Available Targets
					TreeItem NewTarget = new TreeItem(OpenPorts, SWT.NONE, 0);
					NewTarget.setText("Port: " + PortNumber);
					NewTarget.setImage(SWTResourceManager.getImage(
							MainWindow.class, "/resources/port.png"));
					OpenPorts.setExpanded(true);
				}
			}
		});

		ToolItem tltmRun = new ToolItem(toolBar, SWT.NONE);
		tltmRun.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					btnLaunch.notifyListeners(SWT.Selection, null);
				} catch (Exception e2) {
					MessageBox mb = new MessageBox(shlExploitPack, SWT.ERROR);
					mb.setText("Exploit Pack - No module selected");
					mb.setMessage("Sorry, you have to select a module to continue");
					mb.open();
				}

			}
		});

		ToolItem toolItem_7 = new ToolItem(toolBar, SWT.SEPARATOR);
		final ToolItem tltmStop = new ToolItem(toolBar, SWT.NONE);
		// Stop current working jobs
		tltmStop.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				// Lauch the desire exploit
				Runtime RunModule = Runtime.getRuntime();
				// Instance OSValidator
				OSValidator CheckOS = new OSValidator();
				CheckOS.main(null);
				String runStopModules = null;
				OSType = OSValidator.OSType;
				MessageBox messageBox = new MessageBox(shlExploitPack,
						SWT.ICON_INFORMATION | SWT.YES | SWT.NO);

				messageBox.setText("Exploit Pack - Stop current module");
				messageBox
						.setMessage("Do you want to stop the current module?");
				int buttonID = messageBox.open();
				switch (buttonID) {
				case SWT.YES:
					if (OSType.equals("Win")) {
						// Execute exploit WINDOWS
						DebugLog.append("[" + LogTime + "]" + " "
								+ "Stopping current working module" + "\n");
						runStopModules = "cmd.exe /T:0A /K "
								+ " taskkill /F /IM python.exe";
						DebugLog.append("[" + LogTime + "]" + " "
								+ "Module stopped" + "\n");
					} else {
						// Execute exploit LINUX
						DebugLog.append("[" + LogTime + "]" + " "
								+ "Stopping current working module" + "\n");
						runStopModules = "killall python";
						DebugLog.append("[" + LogTime + "]" + " "
								+ "Module stopped" + "\n");
					}
				case SWT.NO:
					return;
				}
				// Finally exec module
				try {
					RunModule.exec(runStopModules);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		tltmStop.setText("Stop");
		tltmStop.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/stop.png"));

		ToolItem toolItem_10 = new ToolItem(toolBar, SWT.SEPARATOR);

		ToolItem tltmDebug = new ToolItem(toolBar, SWT.NONE);
		tltmDebug.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {

			}
		});
		tltmDebug.setText("Debug");
		tltmDebug.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/bug.png"));

		tltmRun.setText("Run");
		tltmRun.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/run.png"));
		
		ToolItem toolItem_8 = new ToolItem(toolBar, SWT.SEPARATOR);

		MenuItem mntmRun_1 = new MenuItem(menu_7, SWT.NONE);
		mntmRun_1.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					btnLaunch.notifyListeners(SWT.Selection, null);
				} catch (Exception e2) {
					MessageBox mb = new MessageBox(shlExploitPack, SWT.ERROR);
					mb.setText("Exploit Pack - No module selected");
					mb.setMessage("Sorry, you have to select a module to continue");
					mb.open();
				}

			}
		});
		mntmRun_1.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/run.png"));
		mntmRun_1.setText("Run \tCtrl+F11");

		MenuItem mntmStop = new MenuItem(menu_7, SWT.NONE);
		mntmStop.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				tltmStop.notifyListeners(SWT.Selection, null);
			}
		});
		mntmStop.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/stop.png"));
		mntmStop.setText("Stop");

		new MenuItem(menu_7, SWT.SEPARATOR);

		MenuItem mntmDebug = new MenuItem(menu_7, SWT.NONE);
		mntmDebug.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (MainWindow.debugMode = true) {
					MessageBox mb = new MessageBox(shlExploitPack,
							SWT.ICON_WARNING | SWT.OK);
					MainWindow.debugMode = false;
					mb.setText("Exploit Pack - Debug mode");
					mb.setMessage("Debug mode ENABLE");
					mb.open();

				}
				if (MainWindow.debugMode = false) {
					MessageBox mb = new MessageBox(shlExploitPack,
							SWT.ICON_WARNING | SWT.OK);
					MainWindow.debugMode = false;
					mb.setText("Exploit Pack - Debug mode");
					mb.setMessage("Debug mode ENABLE");
					mb.open();

				}
			}
		});
		mntmDebug.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/resources/bug.png"));
		mntmDebug.setText("Debug \tF11");

		Composite SearchComposite = new Composite(shlExploitPack, SWT.NONE);
		fd_TreeExploits.top = new FormAttachment(SearchComposite, 6);
		FormData fd_SearchComposite = new FormData();
		fd_SearchComposite.bottom = new FormAttachment(0, 101);
		fd_SearchComposite.top = new FormAttachment(0, 66);
		fd_SearchComposite.left = new FormAttachment(0, 10);
		SearchComposite.setLayoutData(fd_SearchComposite);
		formToolkit.paintBordersFor(SearchComposite);

		final Label SearchImage = new Label(SearchComposite, SWT.NONE);
		SearchImage.setBounds(10, 10, 13, 13);
		SearchImage.setImage(SWTResourceManager.getImage(MainWindow.class,	"/resources/search.gif"));

		// MODULE SEARCH
		SearchCombo = new Combo(SearchComposite, SWT.INHERIT_DEFAULT);
		SearchCombo.setBounds(0, 1, 288, 33);

		SearchCombo.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent e) {
				String SearchInput = SearchCombo.getText().toLowerCase();

				// GENERO EL ARBOL
				String path = "exploits/";

				String files;
				File folder = new File(path);
				File[] listOfFiles = folder.listFiles();
				// Remove ALL
				SearchExploits.removeAll();

				for (int i = 0; i < listOfFiles.length; i++) {

					if (listOfFiles[i].isFile()) {
						files = listOfFiles[i].getName();
						if (files.endsWith(".xml") || files.endsWith(".XML")) {
							// Instancio XMLTreenode
							XMLTreenode NewXMLNode = new XMLTreenode();
							// Start de la clase main de XMLTreenode
							NewXMLNode.main(null, files);
							// Do nothing if search input contains word null
							if (SearchInput.toString().contains("null")) {
								SearchCombo.setText("        Sorry, try again");
								SearchImage.setVisible(true);
								return;
							}
							// Condition for search
							if (NewXMLNode.ExploitName.equals(SearchInput)
									|| NewXMLNode.Service.equals(SearchInput)
									|| NewXMLNode.ExploitType
											.equals(SearchInput)
									|| NewXMLNode.RemotePort
											.equals(SearchInput)) {
								// Create tree item
								TreeItem ItemName = new TreeItem(
										SearchExploits, SWT.NONE);
								ItemName.setText(NewXMLNode.ExploitName);
								ItemName.setImage(SWTResourceManager.getImage(
										MainWindow.class,
										"/resources/square_redS.gif"));
								SearchExploits.setExpanded(true);

								// Create tree item
								TreeItem ItemName1 = new TreeItem(
										SearchHistory, SWT.NONE);
								ItemName1.setText(NewXMLNode.ExploitName);
								ItemName1.setImage(SWTResourceManager.getImage(
										MainWindow.class,
										"/resources/square_redS.gif"));
								SearchHistory.setExpanded(true);
								SearchCombo.setText("        Search Modules");
								SearchImage.setVisible(true);
							}

						}
					}

				}

			}
		});

		SearchCombo.setItems(new String[] { "Show All Services: Type",
				"Show by Port Number: 123 ", "Show by Type: Remote",
				"Show by Type: Local", "Show by Type: Client-Side" });
		formToolkit.adapt(SearchCombo);
		formToolkit.paintBordersFor(SearchCombo);
		SearchCombo.setText("        Search Modules");
		SearchCombo.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseDown(MouseEvent e) {
				SearchCombo.setText("");
				SearchImage.setVisible(false);
			}
		});

		txtModulesExplorer = new Text(shlExploitPack, SWT.BORDER);
		FormData fd_txtModulesExplorer = new FormData();
		fd_txtModulesExplorer.left = new FormAttachment(0, 10);
		fd_txtModulesExplorer.right = new FormAttachment(tabFolder, -6);
		fd_txtModulesExplorer.bottom = new FormAttachment(SearchComposite, -6);
		fd_txtModulesExplorer.top = new FormAttachment(toolBar, 1);
		txtModulesExplorer.setLayoutData(fd_txtModulesExplorer);
		txtModulesExplorer.setBackground(SWTResourceManager.getColor(245, 245,
				245));

		txtModulesExplorer.setText("Modules Explorer");

	}

	// Open Project
	public String OpenFile() {
		FileDialog fileDialog = new FileDialog(shlExploitPack, SWT.OPEN);
		fileDialog.setText("Open");
		String codedir = "exploits/code";
		fileDialog.setFilterPath(codedir);
		String[] filterExt = { "*.ep", "*.*" };
		fileDialog.setFilterExtensions(filterExt);
		String selected = fileDialog.open();
		if (selected == null)
			return null;
		// code here to open the file and display
		FileReader file = null;
		try {
			file = new FileReader(selected);
		} catch (FileNotFoundException e1) {
			MessageBox messageBox = new MessageBox(shlExploitPack,
					SWT.ICON_ERROR | SWT.OK);
			messageBox.setMessage("Could not open file.");
			messageBox.setText("Error");
			messageBox.open();
			return null;
		}
		BufferedReader fileInput = new BufferedReader(file);
		String text = null;
		StringBuffer sb = new StringBuffer();
		try {
			do {
				if (text != null)
					sb.append(text + "\n");
			} while ((text = fileInput.readLine()) != null);
			return sb.toString();
		} catch (IOException e1) {
			MessageBox messageBox = new MessageBox(shlExploitPack,
					SWT.ICON_ERROR | SWT.OK);
			messageBox.setMessage("Could not write to file.");
			messageBox.setText("Error");
			messageBox.open();
			return null;
		}

	}
}
